@page "/events/create"
@using SixLabors.ImageSharp.Processing

@inject NavigationManager NavigationManager
@inject CreatEventService CreatEventService

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<h3>Create Event</h3>

<EditForm Model="_eventViewModel" OnValidSubmit="CreateEvent">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" class="form-control" @bind-Value="_eventViewModel.Title" />
        <ValidationMessage For="@(() => _eventViewModel.Title)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="_eventViewModel.Description" />
        <ValidationMessage For="@(() => _eventViewModel.Description)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="Date">Begin Date</label>
        <InputDate id="Date" class="form-control" @bind-Value="_eventViewModel.BeginDate" />
        <ValidationMessage For="@(() => _eventViewModel.BeginDate)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="Date">Begin Time</label>
        <input type="time" id="Date" class="form-control" @bind-value="_eventViewModel.BeginTime" />
        <ValidationMessage For="@(() => _eventViewModel.BeginTime)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="EndDate">End Date</label>
        <InputDate id="EndDate" class="form-control" @bind-Value="_eventViewModel.EndDate" />
        <ValidationMessage For="@(() => _eventViewModel.EndDate)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="Date">End Time</label>
        <input type="time" id="Date" class="form-control" @bind-value="_eventViewModel.EndTime" />
        <ValidationMessage For="@(() => _eventViewModel.EndTime)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="Location">Venue Address</label>
        <InputText id="Location" class="form-control" @bind-Value="_eventViewModel.Location" />
        <ValidationMessage For="@(() => _eventViewModel.Location)"></ValidationMessage>
    </div>
    <br />
    <div class="form-group">
        <label for="CoverImage">Cover Image</label>
        <InputFile id="CoverImage" class="form-control" OnChange="HandleImageUpload" accept=".png"/>
        <ValidationMessage For="@(() => _eventViewModel.CoverImage)"></ValidationMessage>
    </div>
    <br />
    
    @if (_eventViewModel.ImageUrl != null)
    {
        <img src="@_eventViewModel.ImageUrl" alt="Cover Image" class="img-thumbnail" />
    }
    <br/>
    <br />
    <button type="submit" class="btn btn-primary">Create</button>
    &nbsp;
    <NavLink class="btn btn-secondary" href="/">Cancel</NavLink>
</EditForm>

@code {
    private EventViewModel _eventViewModel = new EventViewModel();

    private string? errorMessage = string.Empty;

    private async Task CreateEvent()
    {

        errorMessage = CreatEventService.ValidateEvent(_eventViewModel);
        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            return;
        }

        //Save event
        await CreatEventService.CreateEventAsync(_eventViewModel);

        //Redirect to event list
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            _eventViewModel.CoverImage = e.File;

            if (_eventViewModel.CoverImage == null)
            {
                errorMessage = "Please select a file.";
                return;
            }

            // generate a unique file name
            var fileName = Path.GetRandomFileName() + Path.GetExtension(_eventViewModel.CoverImage.Name);
            var filePath = Path.Combine("wwwroot", "images", "events", fileName);

            //Resize the image
            using var stream = _eventViewModel.CoverImage.OpenReadStream();
            using var image = await SixLabors.ImageSharp.Image.LoadAsync(stream);
            image.Mutate(x => x.Resize(300, 169));

            //Save the image
            using var fileStream = new FileStream(filePath, FileMode.Create);
            await image.SaveAsync(fileStream, new SixLabors.ImageSharp.Formats.Png.PngEncoder());

            //Set the image url
            _eventViewModel.ImageUrl = "/images/events/" + fileName;

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = "Error uploading image: " + ex.Message;
        }
        

    }
}
